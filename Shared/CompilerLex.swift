//	CompilerLex

#if os(macOS)
import Cocoa
#else
import UIKit
#endif





class CompilerLex: OCLexInput {
	
	

	/*
	 *	Internal generated state
	 */

	static let MAXSTATES: UInt16 =       162
	static let MAXCHARCLASS: UInt16 =    53
	static let MAXACTIONS: UInt16 =      59


	//  Character classes used during parsing:
	//
	//  0: a
	//  1: b
	//  2: c
	//  3: d
	//  4: e
	//  5: f
	//  6: g
	//  7: h
	//  8: i
	//  9: l
	//  10: m
	//  11: n
	//  12: o
	//  13: p
	//  14: r
	//  15: s
	//  16: t
	//  17: u
	//  18: v
	//  19: w
	//  20: {
	//  21: |
	//  22: }
	//  23: I
	//  24: S
	//  25: [A-HJ-RT-Zjkqx-z]
	//  26: \[
	//  27: \]
	//  28: _
	//  29: !
	//  30: "
	//  31: &
	//  32: '
	//  33: (
	//  34: )
	//  35: *
	//  36: +
	//  37: ,
	//  38: \-
	//  39: .
	//  40: /
	//  41: [0-9]
	//  42: :
	//  43: [#-%@\\^]
	//  44: ;
	//  45: <
	//  46: =
	//  47: >
	//  48: ?
	//  49: [\012\015]
	//  50: \011
	//  51:  
	//  52: [\000-\010\013\014\016-\037`~-\377]

	/*  CharClass
	 *
	 *      Maps 8-bit character to character class
	 */

	static let CharClass: [UInt16] = [
		 52,  52,  52,  52,  52,  52,  52,  52, 
		 52,  50,  49,  52,  52,  49,  52,  52, 
		 52,  52,  52,  52,  52,  52,  52,  52, 
		 52,  52,  52,  52,  52,  52,  52,  52, 
		 51,  29,  30,  43,  43,  43,  31,  32, 
		 33,  34,  35,  36,  37,  38,  39,  40, 
		 41,  41,  41,  41,  41,  41,  41,  41, 
		 41,  41,  42,  44,  45,  46,  47,  48, 
		 43,  25,  25,  25,  25,  25,  25,  25, 
		 25,  23,  25,  25,  25,  25,  25,  25, 
		 25,  25,  25,  24,  25,  25,  25,  25, 
		 25,  25,  25,  26,  43,  27,  43,  28, 
		 52,   0,   1,   2,   3,   4,   5,   6, 
		  7,   8,  25,  25,   9,  10,  11,  12, 
		 13,  25,  14,  15,  16,  17,  18,  19, 
		 25,  25,  25,  20,  21,  22,  52,  52, 
		 52,  52,  52,  52,  52,  52,  52,  52, 
		 52,  52,  52,  52,  52,  52,  52,  52, 
		 52,  52,  52,  52,  52,  52,  52,  52, 
		 52,  52,  52,  52,  52,  52,  52,  52, 
		 52,  52,  52,  52,  52,  52,  52,  52, 
		 52,  52,  52,  52,  52,  52,  52,  52, 
		 52,  52,  52,  52,  52,  52,  52,  52, 
		 52,  52,  52,  52,  52,  52,  52,  52, 
		 52,  52,  52,  52,  52,  52,  52,  52, 
		 52,  52,  52,  52,  52,  52,  52,  52, 
		 52,  52,  52,  52,  52,  52,  52,  52, 
		 52,  52,  52,  52,  52,  52,  52,  52, 
		 52,  52,  52,  52,  52,  52,  52,  52, 
		 52,  52,  52,  52,  52,  52,  52,  52, 
		 52,  52,  52,  52,  52,  52,  52,  52, 
		 52,  52,  52,  52,  52,  52,  52,  52
	]

	/*  StateActions
	 *
	 *      Maps states to actions. MAXACTION if this is not a terminal
	 */

	static let StateActions: [UInt16] = [
		 59,  39,   2,  57,  57,  57,  57,  57, 
		 57,  57,  57,  57,  57,  57,  57,  57, 
		 57,  57,  57,  27,  28,  58,   2,  33, 
		 32,  34,  37,  38,  40,  41,  42,  43, 
		 44,  45,  46,  47,  48,  49,  50,  54, 
		 58,  58,  57,  57,  58,  59,  59,   2, 
		 57,  57,  57,  57,  57,  57,  57,  57, 
		 57,  57,  57,  23,  57,  57,  57,  57, 
		 57,  57,  57,  57,  57,  57,  57,  57, 
		 57,  57,  29,   2,  31,  35,  36,  59, 
		 59,  59,  59,  54,  59,  59,  59,  59, 
		 56,  59,  59,  59,   0,  59,  57,   4, 
		 57,  57,  20,  57,  57,   8,  57,  57, 
		 57,  57,  57,  57,  13,  57,  57,  57, 
		 17,  57,  57,  57,  57,  51,  52,  53, 
		 55,  55,  56,  59,   1,   3,   5,  57, 
		 57,  57,  57,  57,  57,  57,  12,  57, 
		 26,  57,  16,  57,  57,  21,  25,  59, 
		  6,  22,  57,  11,  57,  10,  57,  14, 
		 57,  57,  19,   0,   7,   9,  57,  15, 
		 18,  24
	]

	/*  StateMachineIA, StateMachineJA, StateMachineA
	 *
	 *      Lex state machine in compressed sparce row storage format. We do this
	 *  in order to compact the resulting sparse matrix state machine so we don't
	 *  consume as much space. Decoding the new state becomes an O(log(N)) process
	 *  on the input character class as we use a binary search on the JA array.
	 *
	 *      See the article below for more information:
	 *
	 *      https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_row_.28CSR.2C_CRS_or_Yale_format.29
	 */

	static let StateMachineIA: [UInt16] = [
		  0,  53,  55,  59,  84, 109, 134, 159, 
		184, 209, 234, 259, 284, 309, 334, 359, 
		384, 409, 434, 459, 459, 459, 460, 464, 
		466, 466, 467, 467, 467, 467, 467, 467, 
		467, 467, 470, 473, 473, 473, 473, 474, 
		476, 511, 547, 572, 597, 597, 650, 703, 
		707, 732, 757, 782, 807, 832, 857, 882, 
		907, 932, 957, 982, 1007, 1032, 1057, 1082, 
		1107, 1132, 1157, 1182, 1207, 1232, 1257, 1282, 
		1307, 1332, 1357, 1357, 1361, 1361, 1361, 1361, 
		1364, 1367, 1369, 1372, 1374, 1376, 1377, 1412, 
		1413, 1449, 1485, 1538, 1591, 1591, 1644, 1669, 
		1694, 1719, 1744, 1769, 1794, 1819, 1844, 1869, 
		1894, 1919, 1944, 1969, 1994, 2019, 2044, 2069, 
		2094, 2119, 2144, 2169, 2194, 2219, 2219, 2219, 
		2220, 2255, 2256, 2292, 2345, 2398, 2423, 2448, 
		2473, 2498, 2523, 2548, 2573, 2598, 2623, 2648, 
		2673, 2698, 2723, 2748, 2773, 2798, 2823, 2848, 
		2901, 2926, 2951, 2976, 3001, 3026, 3051, 3076, 
		3101, 3126, 3151, 3176, 3229, 3254, 3279, 3304, 
		3329, 3354, 3379
	]

	static let StateMachineJA: [UInt16] = [
		  0,   1,   2,   3,   4,   5,   6,   7, 
		  8,   9,  10,  11,  12,  13,  14,  15, 
		 16,  17,  18,  19,  20,  21,  22,  23, 
		 24,  25,  26,  27,  28,  29,  30,  31, 
		 32,  33,  34,  35,  36,  37,  38,  39, 
		 40,  41,  42,  43,  44,  45,  46,  47, 
		 48,  49,  50,  51,  52,  35,  40,  21, 
		 49,  50,  51,   0,   1,   2,   3,   4, 
		  5,   6,   7,   8,   9,  10,  11,  12, 
		 13,  14,  15,  16,  17,  18,  19,  23, 
		 24,  25,  28,  41,   0,   1,   2,   3, 
		  4,   5,   6,   7,   8,   9,  10,  11, 
		 12,  13,  14,  15,  16,  17,  18,  19, 
		 23,  24,  25,  28,  41,   0,   1,   2, 
		  3,   4,   5,   6,   7,   8,   9,  10, 
		 11,  12,  13,  14,  15,  16,  17,  18, 
		 19,  23,  24,  25,  28,  41,   0,   1, 
		  2,   3,   4,   5,   6,   7,   8,   9, 
		 10,  11,  12,  13,  14,  15,  16,  17, 
		 18,  19,  23,  24,  25,  28,  41,   0, 
		  1,   2,   3,   4,   5,   6,   7,   8, 
		  9,  10,  11,  12,  13,  14,  15,  16, 
		 17,  18,  19,  23,  24,  25,  28,  41, 
		  0,   1,   2,   3,   4,   5,   6,   7, 
		  8,   9,  10,  11,  12,  13,  14,  15, 
		 16,  17,  18,  19,  23,  24,  25,  28, 
		 41,   0,   1,   2,   3,   4,   5,   6, 
		  7,   8,   9,  10,  11,  12,  13,  14, 
		 15,  16,  17,  18,  19,  23,  24,  25, 
		 28,  41,   0,   1,   2,   3,   4,   5, 
		  6,   7,   8,   9,  10,  11,  12,  13, 
		 14,  15,  16,  17,  18,  19,  23,  24, 
		 25,  28,  41,   0,   1,   2,   3,   4, 
		  5,   6,   7,   8,   9,  10,  11,  12, 
		 13,  14,  15,  16,  17,  18,  19,  23, 
		 24,  25,  28,  41,   0,   1,   2,   3, 
		  4,   5,   6,   7,   8,   9,  10,  11, 
		 12,  13,  14,  15,  16,  17,  18,  19, 
		 23,  24,  25,  28,  41,   0,   1,   2, 
		  3,   4,   5,   6,   7,   8,   9,  10, 
		 11,  12,  13,  14,  15,  16,  17,  18, 
		 19,  23,  24,  25,  28,  41,   0,   1, 
		  2,   3,   4,   5,   6,   7,   8,   9, 
		 10,  11,  12,  13,  14,  15,  16,  17, 
		 18,  19,  23,  24,  25,  28,  41,   0, 
		  1,   2,   3,   4,   5,   6,   7,   8, 
		  9,  10,  11,  12,  13,  14,  15,  16, 
		 17,  18,  19,  23,  24,  25,  28,  41, 
		  0,   1,   2,   3,   4,   5,   6,   7, 
		  8,   9,  10,  11,  12,  13,  14,  15, 
		 16,  17,  18,  19,  23,  24,  25,  28, 
		 41,   0,   1,   2,   3,   4,   5,   6, 
		  7,   8,   9,  10,  11,  12,  13,  14, 
		 15,  16,  17,  18,  19,  23,  24,  25, 
		 28,  41,   0,   1,   2,   3,   4,   5, 
		  6,   7,   8,   9,  10,  11,  12,  13, 
		 14,  15,  16,  17,  18,  19,  23,  24, 
		 25,  28,  41,  31,  21,  49,  50,  51, 
		 46,  47,  46,  36,  38,  41,  36,  38, 
		 41,  39,  39,  41,   0,   1,   2,   3, 
		  4,   5,   6,   7,   8,   9,  10,  11, 
		 12,  13,  14,  15,  16,  17,  18,  19, 
		 23,  24,  25,  28,  31,  32,  33,  34, 
		 35,  38,  39,  41,  42,  43,  51,   0, 
		  1,   2,   3,   4,   5,   6,   7,   8, 
		  9,  10,  11,  12,  13,  14,  15,  16, 
		 17,  18,  19,  23,  24,  25,  28,  30, 
		 31,  32,  33,  34,  35,  38,  39,  41, 
		 42,  43,  51,   0,   1,   2,   3,   4, 
		  5,   6,   7,   8,   9,  10,  11,  12, 
		 13,  14,  15,  16,  17,  18,  19,  23, 
		 24,  25,  28,  41,   0,   1,   2,   3, 
		  4,   5,   6,   7,   8,   9,  10,  11, 
		 12,  13,  14,  15,  16,  17,  18,  19, 
		 23,  24,  25,  28,  41,   0,   1,   2, 
		  3,   4,   5,   6,   7,   8,   9,  10, 
		 11,  12,  13,  14,  15,  16,  17,  18, 
		 19,  20,  21,  22,  23,  24,  25,  26, 
		 27,  28,  29,  30,  31,  32,  33,  34, 
		 35,  36,  37,  38,  39,  40,  41,  42, 
		 43,  44,  45,  46,  47,  48,  49,  50, 
		 51,  52,   0,   1,   2,   3,   4,   5, 
		  6,   7,   8,   9,  10,  11,  12,  13, 
		 14,  15,  16,  17,  18,  19,  20,  21, 
		 22,  23,  24,  25,  26,  27,  28,  29, 
		 30,  31,  32,  33,  34,  35,  36,  37, 
		 38,  39,  40,  41,  42,  43,  44,  45, 
		 46,  47,  48,  49,  50,  51,  52,  21, 
		 49,  50,  51,   0,   1,   2,   3,   4, 
		  5,   6,   7,   8,   9,  10,  11,  12, 
		 13,  14,  15,  16,  17,  18,  19,  23, 
		 24,  25,  28,  41,   0,   1,   2,   3, 
		  4,   5,   6,   7,   8,   9,  10,  11, 
		 12,  13,  14,  15,  16,  17,  18,  19, 
		 23,  24,  25,  28,  41,   0,   1,   2, 
		  3,   4,   5,   6,   7,   8,   9,  10, 
		 11,  12,  13,  14,  15,  16,  17,  18, 
		 19,  23,  24,  25,  28,  41,   0,   1, 
		  2,   3,   4,   5,   6,   7,   8,   9, 
		 10,  11,  12,  13,  14,  15,  16,  17, 
		 18,  19,  23,  24,  25,  28,  41,   0, 
		  1,   2,   3,   4,   5,   6,   7,   8, 
		  9,  10,  11,  12,  13,  14,  15,  16, 
		 17,  18,  19,  23,  24,  25,  28,  41, 
		  0,   1,   2,   3,   4,   5,   6,   7, 
		  8,   9,  10,  11,  12,  13,  14,  15, 
		 16,  17,  18,  19,  23,  24,  25,  28, 
		 41,   0,   1,   2,   3,   4,   5,   6, 
		  7,   8,   9,  10,  11,  12,  13,  14, 
		 15,  16,  17,  18,  19,  23,  24,  25, 
		 28,  41,   0,   1,   2,   3,   4,   5, 
		  6,   7,   8,   9,  10,  11,  12,  13, 
		 14,  15,  16,  17,  18,  19,  23,  24, 
		 25,  28,  41,   0,   1,   2,   3,   4, 
		  5,   6,   7,   8,   9,  10,  11,  12, 
		 13,  14,  15,  16,  17,  18,  19,  23, 
		 24,  25,  28,  41,   0,   1,   2,   3, 
		  4,   5,   6,   7,   8,   9,  10,  11, 
		 12,  13,  14,  15,  16,  17,  18,  19, 
		 23,  24,  25,  28,  41,   0,   1,   2, 
		  3,   4,   5,   6,   7,   8,   9,  10, 
		 11,  12,  13,  14,  15,  16,  17,  18, 
		 19,  23,  24,  25,  28,  41,   0,   1, 
		  2,   3,   4,   5,   6,   7,   8,   9, 
		 10,  11,  12,  13,  14,  15,  16,  17, 
		 18,  19,  23,  24,  25,  28,  41,   0, 
		  1,   2,   3,   4,   5,   6,   7,   8, 
		  9,  10,  11,  12,  13,  14,  15,  16, 
		 17,  18,  19,  23,  24,  25,  28,  41, 
		  0,   1,   2,   3,   4,   5,   6,   7, 
		  8,   9,  10,  11,  12,  13,  14,  15, 
		 16,  17,  18,  19,  23,  24,  25,  28, 
		 41,   0,   1,   2,   3,   4,   5,   6, 
		  7,   8,   9,  10,  11,  12,  13,  14, 
		 15,  16,  17,  18,  19,  23,  24,  25, 
		 28,  41,   0,   1,   2,   3,   4,   5, 
		  6,   7,   8,   9,  10,  11,  12,  13, 
		 14,  15,  16,  17,  18,  19,  23,  24, 
		 25,  28,  41,   0,   1,   2,   3,   4, 
		  5,   6,   7,   8,   9,  10,  11,  12, 
		 13,  14,  15,  16,  17,  18,  19,  23, 
		 24,  25,  28,  41,   0,   1,   2,   3, 
		  4,   5,   6,   7,   8,   9,  10,  11, 
		 12,  13,  14,  15,  16,  17,  18,  19, 
		 23,  24,  25,  28,  41,   0,   1,   2, 
		  3,   4,   5,   6,   7,   8,   9,  10, 
		 11,  12,  13,  14,  15,  16,  17,  18, 
		 19,  23,  24,  25,  28,  41,   0,   1, 
		  2,   3,   4,   5,   6,   7,   8,   9, 
		 10,  11,  12,  13,  14,  15,  16,  17, 
		 18,  19,  23,  24,  25,  28,  41,   0, 
		  1,   2,   3,   4,   5,   6,   7,   8, 
		  9,  10,  11,  12,  13,  14,  15,  16, 
		 17,  18,  19,  23,  24,  25,  28,  41, 
		  0,   1,   2,   3,   4,   5,   6,   7, 
		  8,   9,  10,  11,  12,  13,  14,  15, 
		 16,  17,  18,  19,  23,  24,  25,  28, 
		 41,   0,   1,   2,   3,   4,   5,   6, 
		  7,   8,   9,  10,  11,  12,  13,  14, 
		 15,  16,  17,  18,  19,  23,  24,  25, 
		 28,  41,   0,   1,   2,   3,   4,   5, 
		  6,   7,   8,   9,  10,  11,  12,  13, 
		 14,  15,  16,  17,  18,  19,  23,  24, 
		 25,  28,  41,   0,   1,   2,   3,   4, 
		  5,   6,   7,   8,   9,  10,  11,  12, 
		 13,  14,  15,  16,  17,  18,  19,  23, 
		 24,  25,  28,  41,   0,   1,   2,   3, 
		  4,   5,   6,   7,   8,   9,  10,  11, 
		 12,  13,  14,  15,  16,  17,  18,  19, 
		 23,  24,  25,  28,  41,  21,  49,  50, 
		 51,  36,  38,  41,  36,  38,  41,  39, 
		 41,  36,  38,  41,  39,  41,  39,  45, 
		 41,   0,   1,   2,   3,   4,   5,   6, 
		  7,   8,   9,  10,  11,  12,  13,  14, 
		 15,  16,  17,  18,  19,  23,  24,  25, 
		 28,  31,  32,  33,  34,  35,  38,  39, 
		 41,  42,  43,  51,  32,   0,   1,   2, 
		  3,   4,   5,   6,   7,   8,   9,  10, 
		 11,  12,  13,  14,  15,  16,  17,  18, 
		 19,  23,  24,  25,  28,  30,  31,  32, 
		 33,  34,  35,  38,  39,  41,  42,  43, 
		 51,   0,   1,   2,   3,   4,   5,   6, 
		  7,   8,   9,  10,  11,  12,  13,  14, 
		 15,  16,  17,  18,  19,  23,  24,  25, 
		 28,  30,  31,  32,  33,  34,  35,  38, 
		 39,  41,  42,  43,  51,   0,   1,   2, 
		  3,   4,   5,   6,   7,   8,   9,  10, 
		 11,  12,  13,  14,  15,  16,  17,  18, 
		 19,  20,  21,  22,  23,  24,  25,  26, 
		 27,  28,  29,  30,  31,  32,  33,  34, 
		 35,  36,  37,  38,  39,  40,  41,  42, 
		 43,  44,  45,  46,  47,  48,  49,  50, 
		 51,  52,   0,   1,   2,   3,   4,   5, 
		  6,   7,   8,   9,  10,  11,  12,  13, 
		 14,  15,  16,  17,  18,  19,  20,  21, 
		 22,  23,  24,  25,  26,  27,  28,  29, 
		 30,  31,  32,  33,  34,  35,  36,  37, 
		 38,  39,  40,  41,  42,  43,  44,  45, 
		 46,  47,  48,  49,  50,  51,  52,   0, 
		  1,   2,   3,   4,   5,   6,   7,   8, 
		  9,  10,  11,  12,  13,  14,  15,  16, 
		 17,  18,  19,  20,  21,  22,  23,  24, 
		 25,  26,  27,  28,  29,  30,  31,  32, 
		 33,  34,  35,  36,  37,  38,  39,  40, 
		 41,  42,  43,  44,  45,  46,  47,  48, 
		 49,  50,  51,  52,   0,   1,   2,   3, 
		  4,   5,   6,   7,   8,   9,  10,  11, 
		 12,  13,  14,  15,  16,  17,  18,  19, 
		 23,  24,  25,  28,  41,   0,   1,   2, 
		  3,   4,   5,   6,   7,   8,   9,  10, 
		 11,  12,  13,  14,  15,  16,  17,  18, 
		 19,  23,  24,  25,  28,  41,   0,   1, 
		  2,   3,   4,   5,   6,   7,   8,   9, 
		 10,  11,  12,  13,  14,  15,  16,  17, 
		 18,  19,  23,  24,  25,  28,  41,   0, 
		  1,   2,   3,   4,   5,   6,   7,   8, 
		  9,  10,  11,  12,  13,  14,  15,  16, 
		 17,  18,  19,  23,  24,  25,  28,  41, 
		  0,   1,   2,   3,   4,   5,   6,   7, 
		  8,   9,  10,  11,  12,  13,  14,  15, 
		 16,  17,  18,  19,  23,  24,  25,  28, 
		 41,   0,   1,   2,   3,   4,   5,   6, 
		  7,   8,   9,  10,  11,  12,  13,  14, 
		 15,  16,  17,  18,  19,  23,  24,  25, 
		 28,  41,   0,   1,   2,   3,   4,   5, 
		  6,   7,   8,   9,  10,  11,  12,  13, 
		 14,  15,  16,  17,  18,  19,  23,  24, 
		 25,  28,  41,   0,   1,   2,   3,   4, 
		  5,   6,   7,   8,   9,  10,  11,  12, 
		 13,  14,  15,  16,  17,  18,  19,  23, 
		 24,  25,  28,  41,   0,   1,   2,   3, 
		  4,   5,   6,   7,   8,   9,  10,  11, 
		 12,  13,  14,  15,  16,  17,  18,  19, 
		 23,  24,  25,  28,  41,   0,   1,   2, 
		  3,   4,   5,   6,   7,   8,   9,  10, 
		 11,  12,  13,  14,  15,  16,  17,  18, 
		 19,  23,  24,  25,  28,  41,   0,   1, 
		  2,   3,   4,   5,   6,   7,   8,   9, 
		 10,  11,  12,  13,  14,  15,  16,  17, 
		 18,  19,  23,  24,  25,  28,  41,   0, 
		  1,   2,   3,   4,   5,   6,   7,   8, 
		  9,  10,  11,  12,  13,  14,  15,  16, 
		 17,  18,  19,  23,  24,  25,  28,  41, 
		  0,   1,   2,   3,   4,   5,   6,   7, 
		  8,   9,  10,  11,  12,  13,  14,  15, 
		 16,  17,  18,  19,  23,  24,  25,  28, 
		 41,   0,   1,   2,   3,   4,   5,   6, 
		  7,   8,   9,  10,  11,  12,  13,  14, 
		 15,  16,  17,  18,  19,  23,  24,  25, 
		 28,  41,   0,   1,   2,   3,   4,   5, 
		  6,   7,   8,   9,  10,  11,  12,  13, 
		 14,  15,  16,  17,  18,  19,  23,  24, 
		 25,  28,  41,   0,   1,   2,   3,   4, 
		  5,   6,   7,   8,   9,  10,  11,  12, 
		 13,  14,  15,  16,  17,  18,  19,  23, 
		 24,  25,  28,  41,   0,   1,   2,   3, 
		  4,   5,   6,   7,   8,   9,  10,  11, 
		 12,  13,  14,  15,  16,  17,  18,  19, 
		 23,  24,  25,  28,  41,   0,   1,   2, 
		  3,   4,   5,   6,   7,   8,   9,  10, 
		 11,  12,  13,  14,  15,  16,  17,  18, 
		 19,  23,  24,  25,  28,  41,   0,   1, 
		  2,   3,   4,   5,   6,   7,   8,   9, 
		 10,  11,  12,  13,  14,  15,  16,  17, 
		 18,  19,  23,  24,  25,  28,  41,   0, 
		  1,   2,   3,   4,   5,   6,   7,   8, 
		  9,  10,  11,  12,  13,  14,  15,  16, 
		 17,  18,  19,  23,  24,  25,  28,  41, 
		  0,   1,   2,   3,   4,   5,   6,   7, 
		  8,   9,  10,  11,  12,  13,  14,  15, 
		 16,  17,  18,  19,  23,  24,  25,  28, 
		 41,   0,   1,   2,   3,   4,   5,   6, 
		  7,   8,   9,  10,  11,  12,  13,  14, 
		 15,  16,  17,  18,  19,  23,  24,  25, 
		 28,  41,   0,   1,   2,   3,   4,   5, 
		  6,   7,   8,   9,  10,  11,  12,  13, 
		 14,  15,  16,  17,  18,  19,  23,  24, 
		 25,  28,  41,  41,   0,   1,   2,   3, 
		  4,   5,   6,   7,   8,   9,  10,  11, 
		 12,  13,  14,  15,  16,  17,  18,  19, 
		 23,  24,  25,  28,  31,  32,  33,  34, 
		 35,  38,  39,  41,  42,  43,  51,  32, 
		  0,   1,   2,   3,   4,   5,   6,   7, 
		  8,   9,  10,  11,  12,  13,  14,  15, 
		 16,  17,  18,  19,  23,  24,  25,  28, 
		 30,  31,  32,  33,  34,  35,  38,  39, 
		 41,  42,  43,  51,   0,   1,   2,   3, 
		  4,   5,   6,   7,   8,   9,  10,  11, 
		 12,  13,  14,  15,  16,  17,  18,  19, 
		 20,  21,  22,  23,  24,  25,  26,  27, 
		 28,  29,  30,  31,  32,  33,  34,  35, 
		 36,  37,  38,  39,  40,  41,  42,  43, 
		 44,  45,  46,  47,  48,  49,  50,  51, 
		 52,   0,   1,   2,   3,   4,   5,   6, 
		  7,   8,   9,  10,  11,  12,  13,  14, 
		 15,  16,  17,  18,  19,  20,  21,  22, 
		 23,  24,  25,  26,  27,  28,  29,  30, 
		 31,  32,  33,  34,  35,  36,  37,  38, 
		 39,  40,  41,  42,  43,  44,  45,  46, 
		 47,  48,  49,  50,  51,  52,   0,   1, 
		  2,   3,   4,   5,   6,   7,   8,   9, 
		 10,  11,  12,  13,  14,  15,  16,  17, 
		 18,  19,  23,  24,  25,  28,  41,   0, 
		  1,   2,   3,   4,   5,   6,   7,   8, 
		  9,  10,  11,  12,  13,  14,  15,  16, 
		 17,  18,  19,  23,  24,  25,  28,  41, 
		  0,   1,   2,   3,   4,   5,   6,   7, 
		  8,   9,  10,  11,  12,  13,  14,  15, 
		 16,  17,  18,  19,  23,  24,  25,  28, 
		 41,   0,   1,   2,   3,   4,   5,   6, 
		  7,   8,   9,  10,  11,  12,  13,  14, 
		 15,  16,  17,  18,  19,  23,  24,  25, 
		 28,  41,   0,   1,   2,   3,   4,   5, 
		  6,   7,   8,   9,  10,  11,  12,  13, 
		 14,  15,  16,  17,  18,  19,  23,  24, 
		 25,  28,  41,   0,   1,   2,   3,   4, 
		  5,   6,   7,   8,   9,  10,  11,  12, 
		 13,  14,  15,  16,  17,  18,  19,  23, 
		 24,  25,  28,  41,   0,   1,   2,   3, 
		  4,   5,   6,   7,   8,   9,  10,  11, 
		 12,  13,  14,  15,  16,  17,  18,  19, 
		 23,  24,  25,  28,  41,   0,   1,   2, 
		  3,   4,   5,   6,   7,   8,   9,  10, 
		 11,  12,  13,  14,  15,  16,  17,  18, 
		 19,  23,  24,  25,  28,  41,   0,   1, 
		  2,   3,   4,   5,   6,   7,   8,   9, 
		 10,  11,  12,  13,  14,  15,  16,  17, 
		 18,  19,  23,  24,  25,  28,  41,   0, 
		  1,   2,   3,   4,   5,   6,   7,   8, 
		  9,  10,  11,  12,  13,  14,  15,  16, 
		 17,  18,  19,  23,  24,  25,  28,  41, 
		  0,   1,   2,   3,   4,   5,   6,   7, 
		  8,   9,  10,  11,  12,  13,  14,  15, 
		 16,  17,  18,  19,  23,  24,  25,  28, 
		 41,   0,   1,   2,   3,   4,   5,   6, 
		  7,   8,   9,  10,  11,  12,  13,  14, 
		 15,  16,  17,  18,  19,  23,  24,  25, 
		 28,  41,   0,   1,   2,   3,   4,   5, 
		  6,   7,   8,   9,  10,  11,  12,  13, 
		 14,  15,  16,  17,  18,  19,  23,  24, 
		 25,  28,  41,   0,   1,   2,   3,   4, 
		  5,   6,   7,   8,   9,  10,  11,  12, 
		 13,  14,  15,  16,  17,  18,  19,  23, 
		 24,  25,  28,  41,   0,   1,   2,   3, 
		  4,   5,   6,   7,   8,   9,  10,  11, 
		 12,  13,  14,  15,  16,  17,  18,  19, 
		 23,  24,  25,  28,  41,   0,   1,   2, 
		  3,   4,   5,   6,   7,   8,   9,  10, 
		 11,  12,  13,  14,  15,  16,  17,  18, 
		 19,  23,  24,  25,  28,  41,   0,   1, 
		  2,   3,   4,   5,   6,   7,   8,   9, 
		 10,  11,  12,  13,  14,  15,  16,  17, 
		 18,  19,  23,  24,  25,  28,  41,   0, 
		  1,   2,   3,   4,   5,   6,   7,   8, 
		  9,  10,  11,  12,  13,  14,  15,  16, 
		 17,  18,  19,  23,  24,  25,  28,  41, 
		  0,   1,   2,   3,   4,   5,   6,   7, 
		  8,   9,  10,  11,  12,  13,  14,  15, 
		 16,  17,  18,  19,  20,  21,  22,  23, 
		 24,  25,  26,  27,  28,  29,  30,  31, 
		 32,  33,  34,  35,  36,  37,  38,  39, 
		 40,  41,  42,  43,  44,  45,  46,  47, 
		 48,  49,  50,  51,  52,   0,   1,   2, 
		  3,   4,   5,   6,   7,   8,   9,  10, 
		 11,  12,  13,  14,  15,  16,  17,  18, 
		 19,  23,  24,  25,  28,  41,   0,   1, 
		  2,   3,   4,   5,   6,   7,   8,   9, 
		 10,  11,  12,  13,  14,  15,  16,  17, 
		 18,  19,  23,  24,  25,  28,  41,   0, 
		  1,   2,   3,   4,   5,   6,   7,   8, 
		  9,  10,  11,  12,  13,  14,  15,  16, 
		 17,  18,  19,  23,  24,  25,  28,  41, 
		  0,   1,   2,   3,   4,   5,   6,   7, 
		  8,   9,  10,  11,  12,  13,  14,  15, 
		 16,  17,  18,  19,  23,  24,  25,  28, 
		 41,   0,   1,   2,   3,   4,   5,   6, 
		  7,   8,   9,  10,  11,  12,  13,  14, 
		 15,  16,  17,  18,  19,  23,  24,  25, 
		 28,  41,   0,   1,   2,   3,   4,   5, 
		  6,   7,   8,   9,  10,  11,  12,  13, 
		 14,  15,  16,  17,  18,  19,  23,  24, 
		 25,  28,  41,   0,   1,   2,   3,   4, 
		  5,   6,   7,   8,   9,  10,  11,  12, 
		 13,  14,  15,  16,  17,  18,  19,  23, 
		 24,  25,  28,  41,   0,   1,   2,   3, 
		  4,   5,   6,   7,   8,   9,  10,  11, 
		 12,  13,  14,  15,  16,  17,  18,  19, 
		 23,  24,  25,  28,  41,   0,   1,   2, 
		  3,   4,   5,   6,   7,   8,   9,  10, 
		 11,  12,  13,  14,  15,  16,  17,  18, 
		 19,  23,  24,  25,  28,  41,   0,   1, 
		  2,   3,   4,   5,   6,   7,   8,   9, 
		 10,  11,  12,  13,  14,  15,  16,  17, 
		 18,  19,  23,  24,  25,  28,  41,   0, 
		  1,   2,   3,   4,   5,   6,   7,   8, 
		  9,  10,  11,  12,  13,  14,  15,  16, 
		 17,  18,  19,  23,  24,  25,  28,  41, 
		  0,   1,   2,   3,   4,   5,   6,   7, 
		  8,   9,  10,  11,  12,  13,  14,  15, 
		 16,  17,  18,  19,  20,  21,  22,  23, 
		 24,  25,  26,  27,  28,  29,  30,  31, 
		 32,  33,  34,  35,  36,  37,  38,  39, 
		 40,  41,  42,  43,  44,  45,  46,  47, 
		 48,  49,  50,  51,  52,   0,   1,   2, 
		  3,   4,   5,   6,   7,   8,   9,  10, 
		 11,  12,  13,  14,  15,  16,  17,  18, 
		 19,  23,  24,  25,  28,  41,   0,   1, 
		  2,   3,   4,   5,   6,   7,   8,   9, 
		 10,  11,  12,  13,  14,  15,  16,  17, 
		 18,  19,  23,  24,  25,  28,  41,   0, 
		  1,   2,   3,   4,   5,   6,   7,   8, 
		  9,  10,  11,  12,  13,  14,  15,  16, 
		 17,  18,  19,  23,  24,  25,  28,  41, 
		  0,   1,   2,   3,   4,   5,   6,   7, 
		  8,   9,  10,  11,  12,  13,  14,  15, 
		 16,  17,  18,  19,  23,  24,  25,  28, 
		 41,   0,   1,   2,   3,   4,   5,   6, 
		  7,   8,   9,  10,  11,  12,  13,  14, 
		 15,  16,  17,  18,  19,  23,  24,  25, 
		 28,  41,   0,   1,   2,   3,   4,   5, 
		  6,   7,   8,   9,  10,  11,  12,  13, 
		 14,  15,  16,  17,  18,  19,  23,  24, 
		 25,  28,  41
	]

	static let StateMachineA: [UInt16] = [
		 42,  13,  10,   6,  18,   5,  42,  42, 
		  7,  42,   3,  11,  42,   9,  12,   8, 
		 17,  42,   4,  16,  26,  22,  27,  14, 
		 15,  42,  31,  32,  43,  24,  41,  21, 
		 40,  29,  30,  28,  33,  19,  34,  38, 
		  1,  39,  36,  44,  35,  23,  20,  25, 
		 37,   2,   2,   2,  44,  46,  45,  47, 
		 47,  47,  47,  48,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  51,  50,  52,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  51,  50,  56,  49,  49, 
		 49,  49,  49,  49,  49,  49,  54,  49, 
		 49,  55,  49,  49,  49,  49,  53,  49, 
		 49,  49,  49,  49,  51,  50,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  57,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  51,  50,  49, 
		 49,  49,  49,  49,  59,  49,  49,  49, 
		 49,  49,  58,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  51,  50, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 60,  49,  49,  49,  49,  49,  49,  51, 
		 50,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  62,  49,  61, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 51,  50,  49,  49,  49,  49,  49,  49, 
		 49,  63,  49,  49,  49,  49,  64,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  51,  50,  49,  49,  49,  49,  65, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  66,  49,  49,  49, 
		 49,  49,  51,  50,  49,  49,  49,  49, 
		 67,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  51,  50,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  68,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  51,  50,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  69,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  51,  50,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  70, 
		 49,  49,  49,  49,  49,  49,  51,  50, 
		 49,  49,  49,  49,  49,  49,  49,  71, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  51, 
		 50,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  72, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 51,  50,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  73,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  51,  50,  74,  75,  47,  47,  47, 
		 77,  76,  78,  79,  80,  81,  79,  82, 
		 83,  84,  85,  83,  87,  87,  87,  87, 
		 87,  87,  87,  87,  87,  87,  87,  87, 
		 87,  87,  87,  87,  87,  87,  87,  87, 
		 87,  87,  87,  87,  87,  86,  87,  87, 
		 87,  87,  87,  87,  87,  87,  87,  89, 
		 89,  89,  89,  89,  89,  89,  89,  89, 
		 89,  89,  89,  89,  89,  89,  89,  89, 
		 89,  89,  89,  89,  89,  89,  89,  88, 
		 89,  89,  89,  89,  89,  89,  89,  89, 
		 89,  89,  89,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  51,  50,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  51,  50,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  91,  92,  90, 
		 90,  90,  46,  46,  46,  46,  46,  46, 
		 46,  46,  46,  46,  46,  46,  46,  46, 
		 46,  46,  46,  46,  46,  46,  46,  46, 
		 46,  46,  46,  46,  46,  46,  46,  46, 
		 46,  46,  46,  46,  46,  93,  46,  46, 
		 46,  46,  46,  46,  46,  46,  46,  46, 
		 46,  46,  46,  46,  46,  46,  46,  47, 
		 47,  47,  47,  49,  49,  49,  49,  49, 
		 49,  49,  49,  94,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  51,  50,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  51,  50,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  51,  50,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  51,  50,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  95,  49,  49, 
		 49,  49,  49,  49,  49,  49,  51,  50, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  96,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  51, 
		 50,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  97,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 51,  50,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 98,  49,  49,  49,  49,  49,  49,  49, 
		 49,  51,  50,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  99,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  51,  50,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49, 100,  49,  49, 
		 49,  49,  49,  51,  50,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49, 102,  49,  49, 101,  49,  49, 
		 49,  49,  49,  49,  51,  50,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  51,  50,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49, 103,  49,  49, 
		 49,  49,  49,  49,  49,  49,  51,  50, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		104,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  51, 
		 50,  49,  49,  49,  49,  49,  49,  49, 
		 49, 105,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 51,  50, 106,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  51,  50,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49, 107,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  51,  50,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49, 108, 
		 49,  49,  49,  51,  50,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49, 109,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  51,  50,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49, 110,  49, 
		 49,  49,  49,  49,  49,  51,  50,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49, 111,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  51,  50, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		112,  49,  49,  49,  49,  49,  49,  51, 
		 50,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49, 113, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 51,  50,  49,  49,  49,  49,  49,  49, 
		 49,  49, 114,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  51,  50,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49, 115,  49,  49,  49, 
		 49,  49,  51,  50,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49, 116,  49,  49,  49,  49, 
		 49,  49,  49,  51,  50,  47,  47,  47, 
		 47,  79,  80,  81,  79,  80,  81,  85, 
		 81,  79,  82,  83,  85,  83, 117, 118, 
		119,  87,  87,  87,  87,  87,  87,  87, 
		 87,  87,  87,  87,  87,  87,  87,  87, 
		 87,  87,  87,  87,  87,  87,  87,  87, 
		 87,  87, 120,  87,  87,  87,  87,  87, 
		 87,  87,  87,  87, 121,  89,  89,  89, 
		 89,  89,  89,  89,  89,  89,  89,  89, 
		 89,  89,  89,  89,  89,  89,  89,  89, 
		 89,  89,  89,  89,  89,  88,  89,  89, 
		 89,  89,  89,  89,  89,  89,  89,  89, 
		 89,  89,  89,  89,  89,  89,  89,  89, 
		 89,  89,  89,  89,  89,  89,  89,  89, 
		 89,  89,  89,  89,  89,  89,  89,  89, 
		 89, 122,  89,  89,  89,  89,  89,  89, 
		 89,  89,  89,  89,  89,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  91,  92,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90, 123,  90,  90,  90, 
		 90,  90,  91,  92,  90,  90,  90,  46, 
		 46,  46,  46,  46,  46,  46,  46,  46, 
		 46,  46,  46,  46,  46,  46,  46,  46, 
		 46,  46,  46,  46,  46,  46,  46,  46, 
		 46,  46,  46,  46,  46,  46,  46,  46, 
		 46,  46,  93,  46,  46,  46,  46, 124, 
		 46,  46,  46,  46,  46,  46,  46,  46, 
		 46,  46,  46,  46,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49, 125, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  51,  50,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  51,  50,  49,  49, 
		126,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  51,  50, 127, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  51,  50, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  51, 
		 50,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		128,  49,  49,  49,  49,  49,  49,  49, 
		 51,  50,  49, 129,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  51,  50,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  51,  50,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49, 130,  49,  49, 
		 49,  49,  49,  51,  50,  49,  49,  49, 
		 49,  49,  49,  49,  49, 131,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  51,  50,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49, 132,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  51,  50,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49, 133,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  51,  50, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49, 134,  49, 
		 49,  49,  49,  49,  49,  49,  49,  51, 
		 50,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		135,  49,  49,  49,  49,  49,  49,  49, 
		 51,  50,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  51,  50,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49, 136,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  51,  50,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49, 137,  49,  49, 
		 49,  49,  49,  51,  50,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49, 138,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  51,  50,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  51,  50,  49, 
		 49,  49,  49,  49,  49,  49,  49, 139, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  51,  50, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49, 140,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  51, 
		 50,  49,  49,  49,  49, 141,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 51,  50,  49,  49,  49,  49, 142,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  51,  50, 119,  87,  87,  87,  87, 
		 87,  87,  87,  87,  87,  87,  87,  87, 
		 87,  87,  87,  87,  87,  87,  87,  87, 
		 87,  87,  87,  87,  87, 120,  87,  87, 
		 87,  87,  87,  87,  87,  87,  87, 121, 
		 89,  89,  89,  89,  89,  89,  89,  89, 
		 89,  89,  89,  89,  89,  89,  89,  89, 
		 89,  89,  89,  89,  89,  89,  89,  89, 
		122,  89,  89,  89,  89,  89,  89,  89, 
		 89,  89,  89,  89,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90, 143, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  91,  92,  90,  90, 
		 90,  46,  46,  46,  46,  46,  46,  46, 
		 46,  46,  46,  46,  46,  46,  46,  46, 
		 46,  46,  46,  46,  46,  46,  46,  46, 
		 46,  46,  46,  46,  46,  46,  46,  46, 
		 46,  46,  46,  46,  93,  46,  46,  46, 
		 46,  46,  46,  46,  46,  46,  46,  46, 
		 46,  46,  46,  46,  46,  46,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  51,  50,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  51,  50, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		144,  49,  49,  49,  49,  49,  49,  51, 
		 50,  49,  49,  49,  49, 145,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 51,  50,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49, 146,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  51,  50,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49, 147,  49,  49,  49,  49, 
		 49,  49,  51,  50,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49, 148, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  51,  50,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49, 149,  49,  49, 
		 49,  49,  49,  49,  51,  50,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49, 150,  49, 
		 49,  49,  49,  49,  49,  51,  50,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  51,  50, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		151,  49,  49,  49,  49,  49,  49,  51, 
		 50,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 51,  50,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		152,  49,  49,  49,  49,  49,  49,  49, 
		 49,  51,  50,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  51,  50,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49, 153, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  51,  50,  49,  49,  49, 
		 49, 154,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  51,  50,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  51,  50,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  51,  50, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90, 155,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 91,  92,  90,  90,  90,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  51,  50,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  51,  50,  49, 
		 49,  49,  49, 156,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  51,  50, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  51, 
		 50,  49,  49,  49,  49,  49,  49, 157, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 51,  50,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  51,  50,  49,  49,  49,  49, 158, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  51,  50,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  51,  50,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		159,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  51,  50,  49,  49, 
		 49,  49,  49,  49, 160,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  51,  50,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  51,  50, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 90,  90,  90,  90,  90,  90,  90,  90, 
		 91,  92,  90,  90,  90,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  51,  50,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  51,  50,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49, 161,  49,  49, 
		 49,  49,  49,  49,  49,  49,  51,  50, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  51, 
		 50,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 51,  50,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  49,  49,  49,  49,  49,  49,  49, 
		 49,  51,  50
	]


	/*
	 *	File status
	 */

	public var line: Int
	public var column: Int
	public var filename: String?
	public var text: String
	public var abort: String?
	public var value: AnyObject?

	/*
	 *	State
	 */

	private var file: OCFileInput


	/*
	 *	Internal status
	 */

	private var curLine: Int
	private var curColumn: Int

	// Mark location support
	private var markLine: Int
	private var markColumn: Int

	// Mark buffer storage
	private var isMarked: Bool
	private var markBuffer: NSMutableString

	// Read cache
	private var readPos: Int
	private var readBuffer: NSMutableString

	// Text read buffer
	private var textMarkSize: Int
	private var textBuffer: NSMutableString

	// State flags
	private var states: UInt64

	/*
	 *	Initialize our parser with the input buffer
	 */

	public init(stream f: OCFileInput)
	{
		file = f

		// Zero public values
		line = 0
		column = 0
		filename = nil
		text = String()
		abort = nil
		value = nil

		// Zero private
		isMarked = false
		markBuffer = NSMutableString()

		readPos = 0
		readBuffer = NSMutableString()

		textMarkSize = 0
		textBuffer = NSMutableString()

		curLine = 0
		curColumn = 0
		markLine = 0
		markColumn = 0

		states = 0

		
	}

	deinit {
		
	}

	/*
	 *	Internal read backtrack support. We implement the internal methods
	 *	for mark, unmark and reset to note the current file position. This is
	 *	used by the lexer to unwind the read queue if we overread the number
	 *	of characters during parsing
	 *
	 *	In essence, as we execute the DFA while we read characters, when we
	 *	find an end state, we mark the stream. Then we continue to read until
	 *	we reach an error--at which point we rewind back to the mark location.
	 */

	/*
	 *		Mark: note that we should cache characters being read so we can rewind
	 *	to this location in the future
	 */

	private func mark()
	{
		markLine = curLine
		markColumn = curColumn
		textMarkSize = textBuffer.length

		isMarked = true
		markBuffer.deleteCharacters(in: NSMakeRange(0, markBuffer.length))
	}

	/*
	 *	Reset: reset the buffer positions
	 */

	private func reset()
	{
		if !isMarked {
			// not marked, nothing to do.
			return
		}

		/*
		 *	Clear the part that was already read
		 */

		if (readPos < readBuffer.length) {
			readBuffer.deleteCharacters(in: NSMakeRange(0,readPos))
		} else {
			readBuffer.deleteCharacters(in: NSMakeRange(0,readBuffer.length))
		}

		/*
		 *	Now moved the marked stuff
		 */

		if (markBuffer.length > 0) {
			readBuffer.insert(markBuffer as String, at: 0)
		}

		/*
		 *	Clear the mark, reset positions
		 */

		readPos = 0
		isMarked = false
		markBuffer.deleteCharacters(in: NSMakeRange(0, markBuffer.length))

		/*
		 *	Update the file position
		 */

		curLine = markLine
		curColumn = markColumn

		/*
		 *	Remove the read text back to the marked location
		 */

		if textMarkSize < textBuffer.length {
			textBuffer.deleteCharacters(in: NSMakeRange(textMarkSize,textBuffer.length - textMarkSize))
		}
	}

	/*
	 *	Read a single character or -1 if at EOF
	 */

	private func input() -> Int
	{
		var ch: Int

		/*
		 *	Read from marked buffer
		 */

		if readPos < readBuffer.length {
			ch = Int(readBuffer.character(at: readPos))
			readPos += 1
		} else {
			ch = file.readByte()
			if ch == -1 {
				return -1
			}
		}

		/*
		 *	Update file position
		 */

		if ch == 0x0A {			// '\n'
			curColumn = 0
			curLine += 1
		} else {
			curColumn += 1
		}

		/*
		 *	Handle mark
		 */

		if isMarked {
			markBuffer.appendFormat("%c", ch)
		}

		/*
		 *	Done.
		 */

		return ch
	}

	/*
	 *	EOL testing
	 */

	private func atEOL() -> Bool
	{
		var ch: Int

		if readPos < readBuffer.length {
			ch = Int(readBuffer.character(at: readPos))
		} else {
			ch = file.peekByte()
		}

		if (ch == -1) || (ch == 0x0A) {
			return true
		} else {
			return false
		}
	}

	private func atSOL() -> Bool
	{
		return column == 0
	}

	/*
	 *	Read the state for the class/state combination. Decodes the sparce
	 *	matrix that is compressed in StateMachineIA/JA/A above. If the
	 *	entry is not found, returns MAXSTATES. This is the same as the lookup
	 *	StateMachine[class][state] if the StateMachine sparse array was
	 *	unrolled
	 */

	private func stateForClass(_ charClass: UInt16, state: UInt16) -> UInt16
	{
		var min, max, mid: UInt16

		/* Find range */
		min = CompilerLex.StateMachineIA[Int(state)]
		max = CompilerLex.StateMachineIA[Int(state)+1]

		while min < max {
			mid = (min + max) / 2;
			let j = CompilerLex.StateMachineJA[Int(mid)]
			if charClass == j {
				return CompilerLex.StateMachineA[Int(mid)]
			} else if charClass < j {
				max = mid
			} else {
				min = mid + 1
			}
		}

		return CompilerLex.MAXSTATES
	}

	public func set(file: String?, line l: Int)
	{
		if file != nil {
			filename = file
		}
		line = l
	}

	public func set(line l: Int)
	{
		line = l
	}

	/*
	 *	Internal methods declared within the Lex file
	 */



	/*
	 *  For conditional states this takes an end DFA state and
	 *  determines the proper end rule given the current start
	 *  conditionals.
	 */

	private func conditionalAction(_ state: UInt16) -> UInt16
{
    switch state {
        default:
            return CompilerLex.MAXACTIONS;
    }
}


	public func lex() -> Int
	{
		var state: UInt16
		var action: UInt16 = CompilerLex.MAXACTIONS

		abort = nil
		value = nil
		text = ""

		/*
		 *	Run until we hit EOF or a production rule triggers a return
		 */

		while true {
			/*
			 *	Start running the DFA
			 */

			state = 0
			textBuffer.deleteCharacters(in: NSMakeRange(0, textBuffer.length))
			line = curLine
			column = curColumn

			while true {
				let ch = input()
				if ch == -1 {
					/*
					 *	We've hit EOF. If there is no stored text, we assume
					 *	we're at the file EOF, so return EOF. Otherwise treat as
					 *	illegal state transition.
					 */

					if textBuffer.length == 0 {
						return -1
					}
					break
				}

				/*
				 *	Attempt to translate to the next state
				 */

				let charClass = CompilerLex.CharClass[Int(ch)]
				let newState = stateForClass(charClass, state: state)
				if newState >= CompilerLex.MAXSTATES {
					/* Illegal state translation */
					break
				}

				/*
				 *	Store the character we read, and transition to the next
				 *	state
				 */

				state = newState
				textBuffer.appendFormat("%c", ch)

				/*
				 *	Note the current action if we have one
				 */

				var newAction = CompilerLex.StateActions[Int(state)]
				if newAction > CompilerLex.MAXACTIONS {
					newAction = conditionalAction(newAction)
				}
				if newAction != CompilerLex.MAXACTIONS {
					action = newAction
					mark()
				}
			}

			/*
			 *	If no action is set, we simply abort after setting an internal
			 *	error state. This should never happen in a well designed lexer
			 */

			if action == CompilerLex.MAXACTIONS {
				abort = "Illegal character sequence"
				return -1
			}

			/*
			 *	Action is set, so we rewind.
			 */

			reset()
			if textBuffer.length == 0 {
				abort = "No characters read in sequence"
				return -1
			}

			/*
			 *	Convert text sequence into string
			 */

			text = textBuffer as String
			value = textBuffer

			/*
			 *	Execute action
			 */

			switch action {
            case 3:
                return CompilerParser.MAIN
            case 4:
                return  CompilerParser.VAR
            case 5:
                return CompilerParser.FUNC
            case 6:
                value = NSNumber(integerLiteral: TypeSymbol.float.rawValue)
    return CompilerParser.FLOAT 
            case 7:
                value = NSNumber(integerLiteral:TypeSymbol.double.rawValue)
    return CompilerParser.DOUBLE 
            case 8:
                value = NSNumber(integerLiteral:TypeSymbol.integer.rawValue)
    return CompilerParser.INT
            case 9:
                value = NSNumber(integerLiteral:TypeSymbol.string.rawValue)
    return CompilerParser.STR
            case 10:
                return CompilerParser.PRINT
            case 11:
                return CompilerParser.INPUT
            case 12:
                value = NSNumber(integerLiteral:TypeSymbol.char.rawValue)
    return CompilerParser.CHAR
            case 13:
                return CompilerParser.NEW
            case 14:
                return CompilerParser.CONST
            case 15:
                return CompilerParser.RTN
            case 16:
                value = NSNumber(integerLiteral:TypeSymbol.boolean.rawValue)
    return CompilerParser.BOOLEAN
            case 17:
                value = NSNumber(integerLiteral:TypeSymbol.Integer.rawValue)
    return CompilerParser.INTEGERCLASS
            case 18:
                value = NSNumber(integerLiteral:TypeSymbol.String.rawValue)
    return CompilerParser.STRINGCLASS
            case 19:
                return CompilerParser.WHILE
            case 20:
                return CompilerParser.FOR
            case 21:
                value = NSNumber(integerLiteral:BooleanType.T.rawValue)
    return CompilerParser.T
            case 22:
                value = NSNumber(integerLiteral:BooleanType.F.rawValue)
    return CompilerParser.F
            case 23:
                return CompilerParser.IF
            case 24:
                value = NSNumber(integerLiteral:TypeSymbol.pointer.rawValue)
    return CompilerParser.PNT
            case 25:
                return CompilerParser.ELSE 
            case 26:
                return CompilerParser.NLL 
            case 27:
                return CompilerParser.COMMA
            case 28:
                return CompilerParser.EQ
            case 29:
                return CompilerParser.AND
            case 30:
                return CompilerParser.OR
            case 31:
                return CompilerParser.DIF
            case 32:
                return CompilerParser.NOT
            case 33:
                return CompilerParser.LT
            case 34:
                return CompilerParser.GT
            case 35:
                return CompilerParser.LE
            case 36:
                return CompilerParser.GE
            case 37:
                return CompilerParser.LBRACE
            case 38:
                return CompilerParser.RBRACE
            case 39:
                return CompilerParser.DIVIDE
            case 40:
                return CompilerParser.TIMES
            case 41:
                return CompilerParser.LPAREN
            case 42:
                return CompilerParser.RPAREN
            case 43:
                return CompilerParser.LSBRAKE
            case 44:
                return CompilerParser.RSBRAKE
            case 45:
                return CompilerParser.PLUS
            case 46:
                return CompilerParser.MINUS
            case 47:
                return CompilerParser.SEMICOLON
            case 48:
                return CompilerParser.COLON
            case 49:
                return CompilerParser.QM
            case 50:
                return CompilerParser.DOT
            case 51:
                value = NSString(string:text)
    return CompilerParser.CPTRG
            case 52:
                value = NSString(string:text)
    return CompilerParser.INCPTRG
            case 53:
                value = NSNumber.init(value:Float(text) ?? 0)
    return CompilerParser.CTEF
            case 54:
                value = NSNumber.init(value:Int(text) ?? 0)
    return CompilerParser.CTEI
            case 55:
                value = NSString(string:text)
    return CompilerParser.CTEC
            case 56:
                value = NSString(string:text)
    return CompilerParser.CTES
            case 57:
                value = NSString(string:text)
    return CompilerParser.ID
            case 58:
                print("ERROR")
                print(text)
                return Int(text.unicodeScalars.first?.value ?? 0)
            
				default:
					break;
			}
		}
	}
}
